main_dynamic:
    1223:	48 8d 05 0e 0e 00 00 	lea    0xe0e(%rip),%rax        # 2038 <_IO_stdin_used+0x38>
main_static:
    117b:	e8 ba 00 00 00       	call   123a <test_collatz_convergence>
000000000000123a <test_collatz_convergence>:
    123a:	f3 0f 1e fa          	endbr64
    123e:	55                   	push   %rbp
    123f:	48 89 e5             	mov    %rsp,%rbp
    1242:	48 83 ec 20          	sub    $0x20,%rsp
    1246:	89 7d ec             	mov    %edi,-0x14(%rbp)
    1249:	89 75 e8             	mov    %esi,-0x18(%rbp)
    124c:	8b 45 ec             	mov    -0x14(%rbp),%eax
    124f:	89 45 f8             	mov    %eax,-0x8(%rbp)
    1252:	83 7d f8 01          	cmpl   $0x1,-0x8(%rbp)
    1256:	7f 16                	jg     126e <test_collatz_convergence+0x34>
    1258:	48 8d 05 44 0e 00 00 	lea    0xe44(%rip),%rax        # 20a3 <_IO_stdin_used+0xa3>
    125f:	48 89 c7             	mov    %rax,%rdi
    1262:	e8 f9 fd ff ff       	call   1060 <puts@plt>
    1267:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    126c:	eb 35                	jmp    12a3 <test_collatz_convergence+0x69>
    126e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    1275:	eb 1f                	jmp    1296 <test_collatz_convergence+0x5c>
    1277:	8b 45 f8             	mov    -0x8(%rbp),%eax
    127a:	89 c7                	mov    %eax,%edi
    127c:	e8 8b ff ff ff       	call   120c <collatz_conjecture>
    1281:	89 45 f8             	mov    %eax,-0x8(%rbp)
    1284:	83 7d f8 01          	cmpl   $0x1,-0x8(%rbp)
    1288:	75 08                	jne    1292 <test_collatz_convergence+0x58>
    128a:	8b 45 fc             	mov    -0x4(%rbp),%eax
    128d:	83 c0 01             	add    $0x1,%eax
    1290:	eb 11                	jmp    12a3 <test_collatz_convergence+0x69>
    1292:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
    1296:	8b 45 fc             	mov    -0x4(%rbp),%eax
    1299:	3b 45 e8             	cmp    -0x18(%rbp),%eax
    129c:	7c d9                	jl     1277 <test_collatz_convergence+0x3d>
    129e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    12a3:	c9                   	leave
    12a4:	c3                   	ret
main_shared:
    117b:	e8 f0 fe ff ff       	call   1070 <test_collatz_convergence@plt>
0000000000001070 <test_collatz_convergence@plt>:
    1070:	f3 0f 1e fa          	endbr64
    1074:	f2 ff 25 55 2f 00 00 	bnd jmp *0x2f55(%rip)        # 3fd0 <test_collatz_convergence@Base>
    107b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

main_dynamic:

Wywołanie funkcji test_collatz_convergence wskazuje na adres za pomocą instrukcji lea (Load Effective Address). Adres tej funkcji jest obliczany względem wskaźnika instrukcji wywołania (RIP).
test_collatz_convergence nie jest wywoływane bezpośrednio, ale przez manipulację rejestrami.
Funkcja jest odnajdywana i wywoływana dynamicznie podczas działania programu, co jest typowe dla bibliotek współdzielonych (shared libraries).
main_static:

Wywołanie funkcji test_collatz_convergence odbywa się poprzez bezpośrednie wywołanie (call) z określonym adresem, który jest bezpośrednio wpisany w kod maszynowy.
test_collatz_convergence jest wywoływane bezpośrednio przez podanie konkretnego adresu.
Funkcja jest odnajdywana i wywoływana statycznie w czasie kompilacji, co jest typowe dla bibliotek statycznych.
main_shared:

Wywołanie funkcji test_collatz_convergence wskazuje na adres poprzez procedurę skoku z odwołaniem do PLT (Procedure Linkage Table).
test_collatz_convergence jest wywoływane przez procedurę skoku z tabeli łączenia procedur.
Funkcja jest odnajdywana i wywoływana dynamicznie podczas działania programu, podobnie jak w przypadku bibliotek współdzielonych.
Podsumowując, różnice w kodzie binarnym wynikają z różnych mechanizmów linkowania i wywoływania funkcji w zależności od typu pliku wykonywalnego oraz sposobu obsługi funkcji zewnętrznych przez kompilator i linker.